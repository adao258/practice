使用jQuery的基本步骤
    1.闭包
    2.入口函数
    3.功能实现代码(事件处理)
    主要，导包的代码一定要放在js代码的最上面。
  jQuery的入口函数和$符号
    入口函数：
        原生js的入口函数指的是：window.onload = function() {};  //原生 js 的入口函数。页面上所有内容加载完毕，才执行。
        jQuery的入口函数：
            写法一：
            //1.文档加载完毕，图片不加载的时候，就可以执行这个函数。
            $(document).ready(function () {
            alert(1);
            })
            写法二.
            //2.文档加载完毕，图片不加载的时候，就可以执行这个函数。
            $(function () {
            alert(1);
            });
            写法三.
            //3.文档加载完毕，图片也加载完毕的时候，在执行这个函数。
            $(window).ready(function () {
            alert(1);
            })
  jQuery函数与js函数的区别：
    区别一：书写个数不同
        Js 的入口函数只能出现一次，出现多次会存在事件覆盖的问题。
        Js 的入口函数只能出现一次，出现多次会存在事件覆盖的问题。
    区别二：执行时机不同
        Js的入口函数是在所有的文件资源加载完成后，才执行。这些文件资源包括：页面文档、外部的js文件、外部的css文件、图片等。
        jQuery的入口函数，是在文档加载完成后，就执行。文档加载完成指的是：DOM树加载完成后，就可以操作DOM了，不用等到所有的外部资源都加载完成。
        文档加载的顺序：从上往下，边解析边执行。
    jQuery的$符号
        jQuery 使用 $ 符号原因：书写简洁、相对于其他字符与众不同、容易被记住。
        jQuery占用了我们两个变量：$ 和 jQuery。当我们在代码中打印它们俩的时候：是等价的
        $===jQuery
        $ 实际上表示的是一个函数名 如下：
            $(); // 调用上面我们自定义的函数$
            $(document）.ready(function(){}); // 调用入口函数
            $(function(){}); // 调用入口函数
            $(“#btnShow”) // 获取id属性为btnShow的元素
            $(“div”) // 获取所有的div标签元素
            jQuery 里面的 $ 函数，根据传入参数的不同，进行不同的调用，实现不同的功能。返回的是jQuery对象。
            jQuery这个js库，除了 $ 之外，还提供了另外一个函数：jQuery。jQuery函数跟 $ 函数的关系：jQuery === $。
  js中的DOM对象 和 jQuery对象 比较（重点，难点）
    二者的区别
    通过 jQuery 获取的元素是一个数组，数组中包含着原生JS中的DOM对象。举例：
    <div></div>
    <div class="box"></div>
    <div id="box"></div>
    <div class="box"></div>
    <div></div>

        var myBox = document.getElementById("box");           //通过 id 获取单个元素
        var boxArr = document.getElementsByClassName("box");  //通过 class 获取的是数组
        var divArr = document.getElementsByTagName("div");    //通过标签获取的是数组
        var divArr = document.getElementsByTagName("div");    //通过标签获取的是数组
    通过 jQuery 获取这些元素节点的方式是：（获取的都是数组）
        //获取的是数组，里面包含着原生 JS 中的DOM对象。
        var jqBox1 = $("#box");
        var jqBox2 = $(".box");
        var jqBox3 = $("div");
    由于JQuery 自带了 css()方法，我们还可以直接在代码中给 div 设置 css 属性。
    jQuery 就是把 DOM 对象重新包装了一下，让其具有了 jQuery 方法。
  二者的相互转换
    DOM对象转化为jQuery对象
    $(js对象);
    jqBox1 = $(myBox);
	jqBox2 = $(boxArr);
	jqBox3 = $(divArr)
    DOM 对象转换成了 jQuery 对象之后，上面的功能可以直接调用。
    jQuery对象转化为DOM对象
    jquery对象[index];      //方式1（推荐）
    jquery对象.get(index);  //方式2
    jQuery对象转换成了 DOM 对象之后，可以直接调用 DOM 提供的一些功能。如：
    jqBox3[0].style.backgroundColor = "black";
    jqBox3.get(4).style.backgroundColor = "pink";
    如果想要用哪种方式设置属性或方法，必须转换成该类型。
  jQuery选择器：
    $("#demo")   选择id为demo的第一个元素    // $("demo").css("background","red")
    $(".liItem")  选择所有类名为liItem的元素    //$(".liItem").css("background","red")
    $("div")  选择所有标签名字为div的元素   //$("div").css("background","red")
    $("*")  选择所有元素，少用或配合其他选择器使用    //$("*").css("background","red")
    $("#demo,.liItem")选择多个指定的元素，这里选择出了demo和liItem元素  //$("#demo,.liItem").css("background","red")
  层级选择器：
    空格    后代选择器，选择所有的后代      //$("div span").css("background","red")
    >       子代选择器，选择所有子代    //$("div>span").css("background","red")
    +       紧邻选择器，选择紧挨着的下一个元素      //$("div+p").css("background","red")
    ~       兄弟选择器，选择后买的所有兄弟元素      //$("div~p").css("background","red")
  基本过滤选择器：
    :eq(index)  相等选择器，index是从0开始的一个数字，选择序号为index的元素，选择第一个匹配的元素  //$("li:eq(1)").css("font","30px")
    :gt(index)  选择序号大于index的元素     //$("li:gt(4)").css("font","10px")
    :It(index)  选择小于index的元素     //$("li:It(3)").css("font","10px")
    :odd    奇数行选择器    //$("li:odd").css("background","red")
    :even  偶数行选择器    //$("li:even").css("background","red")
    :first  选择匹配第一个元素  //$("li:first").css("background","red")
    :last  选择匹配最后一个选择器  //$("li:last").css("background","red")
  属性选择器：
    $("a[href]")  选择所有包含href属性的元素    //$("a[href]").css("background","red")
    $("a[href='itCast']")   选择href属性值为itCast的所有a标签   //$("a[href='itCast']").css("background","red")
    $("a[href!='itCast']")  选择所有href属性值不等于itCase的所有元素，包括没有href属性的元素    //$("a[href！='itCast']").css("background","red")
    $("a[href^='web']")     选择所有以web开头的元素     //$("a[href^='web']").css("background","red")
    $("a[href$='cn']")      选择所有以cn结尾的元素      //$("a[href$='cn']").css("background","red")
    $("a[href*='i']")       选择所有包含i这个字符的元素，可以是中英文   //$("a[href*='i']").css("background","red")
    $("a[href][title='我']")    选择所有符合指定属性规则的元素，都符合才会被选中
  筛选选择器：
    find(selector)  查找指定元素的所有后代元素，包含子子孙孙  //$("#wrap").find("li").css("color","red")
    children    查找指定元素的直接子元素(亲儿子元素)    //$("#wrap").children("li").css("color","red")
    siblings    查找所有兄弟元素，不包括自己    //$("#wrap").siblings().css("color","red")
    parent      查找父元素，亲的    //$("#wrap").parent().css("color","red")    
    eq(index)   查找指定元素的第index个元素，//$("li").eq(2)  选择所有li元素中第二个
  弹出一级菜单的下拉菜单：
    <script>
    //入口函数
    $(document).ready(function{
         //需求：鼠标放入一级li中，让他里面的ul显示。移开隐藏。
         var jqli=$(".wrap>ul>li");
         //绑定事件
         jqli.mouseenter(function(){
            // console.log(this);  //打印结果是js中的dom对象。注意：jquery对象绑定的事件中，this指js中的dom对象。【重要】
            //让this中的ul显示出来。
            //原生 js 的做法是：this.children[1].style.display = "block";
            //把js的dom对象包装为jquery对象，然后用jquery方法操作
            $(this).children("ul").show();
         })
          //绑定事件：鼠标移开时，隐藏下拉菜单
          jqli.mouseleave(function(){
              $(this).children("ul").hide();
          })
    })
    </script>

  鼠标悬停时变色
    <script>
    $(function(){
        //需求；隔行变色；鼠标悬停时，还要变色。
        var jqli1=$("li:odd");
        var jqli2=$("li:even");
        jqli1.css("background","red");
        jqli2.css("background","white");
        //鼠标悬停时变色
        var color ="";
        $("li").mouseenter(function(){
            color=$(this).css("background");//先把之前的颜色保存下来，鼠标离开时还原
            $(this).css("background","red")
        })
        //鼠标离开时，恢复为原来的颜色
        $("li").mouseleave(function(){
            $(this).css("background","color");
        })
    })
    </script>

  突出显示：
    要求：鼠标悬停时，突出显示这个li，其他li标签都半透明
    <script>
    jQuery(window).ready(function(){
         //需求：鼠标放入li中，其他的li半透明，当前盒子的opacity值为1
         $(".wrap").find("li").mouseenter(function(){
             //链式编程
             $(this).css("opacity","1").siblings("li").css("opacity","0.4");
         })
         //离开wrap的时候所有的li的全部opacity值为1；
         $(".wrap").mouseleave(function(){
             $(this).children().children("li").css("opacity","1");

         })
    })
    </script>

  手风琴效果
  淘宝精品服饰广告

jQuery动画详解：
    jQuery提供的一组网页中常见的动画效果，这些动画是标准的、有规律的效果；同时还提供给我们了自定义动画的功能。
    显示动画;
        1. $("div").show();
        解释：无参数，表示让指定的元素直接显示出来。其实这个方法的底层就是通过display: block;实现的。
        2. $("div").show(2000);
        解释：通过控制元素的宽高、透明度、display属性，逐渐显示，2秒后显示完毕。
        3. $("div").show("slow");
        slow 慢：600ms  normal 正常：400ms  fast 快：200ms
        4. 
            //show(毫秒值，回调函数;
            $("div").show(5000,function () {
            alert("动画执行完毕！");
            });
        解释：动画执行完后，立即执行回调函数。
        上面的四种方式几乎一致：参数可以有两个，第一个是动画的执行时长，第二个是动画结束后执行的回调函数。
    隐藏动画：
        $(selector).hide();
        $(selector).hide(1000);
        $(selector).hide("slow");
        $(selector).hide(1000, function(){});
    显示和隐藏来回切换
        显示和隐藏的来回切换采用的是toggle()方法：就是先执行show()，再执行hide()。
        $(selector).toggle();
    滑入和滑出
        1.滑入动画效果
            $(selector).slideDown(speed,回调函数)
            解释：下拉动画，显示元素。
            注意：省略参数或者传入不合法的字符串，那么则使用默认值：400毫秒（同样适用于fadeIn/slideDown/slideUp）
        2.滑出动画效果
            $(selector).slideUp(speed,回调函数)
            解释：上拉动画，隐藏元素
        3.滑入滑出切换动画效果
            $(selector).slideToggle(speed,回调函数)
    滑入，滑出，切换动画：
    <script>
        $(function(){
            //点击按钮后产生动画
            $("button:eq(0)").click(function(){
                //滑入动画： slideDown(毫秒值，回调函数[显示完毕执行什么]);
                $("div").slideDown(2000,function(){
                    alter("动画执行完毕");
                });
            })
            //滑出动画
            $("button:eq(1)").click(function(){
                 //滑出动画：slideUp(毫秒值，回调函数[显示完毕后执行什么]);
                 $("div").slideUp(function(){
                     alter("动画执行完毕")
                 })
            })
            $("button:eq(2)").click(function(){
                //滑入滑出切换（同样有四种用法）
                $("div").slideToggle(1000);
            })  
        })
    </script>
    淡入，淡出，切换
        1.淡入动画效果
        $(selector).fadeIn(speed,callback);
        作用：让元素以淡淡的进入视线的方式展示出来。
        2.淡出动画效果
        $(selector).fadeOut(1000);
        作用：让元素以渐渐消失的方式隐藏起来
        3.淡入淡出切换动画效果
        $(selector).fadeToggle('fast',callback);
        作用：通过改变透明度，切换匹配元素的显示或隐藏状态。
    淡入，淡出，切换动画
        <script>
        //用法都有四种，可参考上面4个方法
            $(function(){
                //点击按钮后产生动画
                $("button:eq(0)").click(function(){
                    $("div").fadeIn();
                })
                //滑出动画
                $("button:eq(1)").click(function(){
                    $("div").fadeOut();
                })
                //滑出 滑入 切换
                $("selector:eq(2)").click(function(){
                    $("div").fadeToggle(1000);
                })
            })
        </script>
    自定义动画
        $(selector).animate({params},speed,callback);
        作用：执行一组CSS属性的自定义动画。
        第一个参数表示：要执行动画的CSS属性（必选）
        第二个参数表示：执行动画时长（可选）
        第三个参数表示：动画执行完后，立即执行的回调函数（可选）
    停止动画;
        $(selector).stop(true,false);
        第一个参数：true：后续动画不执行   false：后续动画执行
        第二个参数：true：立即执行当前动画    false：立即停止当前动画
        参数如果都不写，默认两个都是false。实际工作中，直接写stop()用的多。
        $(this).children("ul").stop().slideDown(1000);
        $(this).children("ul").stop().slideUp(1000);
        上方代码中，关键的地方在于，用了stop函数，再执行动画前，先停掉之前的动画。
    右下角的弹出广告
     //需求：然广告ad部分，先滑入，在滑出，在淡入。然后绑定事件，点击span弹出
        $(".ad").slideDown(1000).slideUp(1000).fadeIn(1000).children("span").click(function () {
                $(this).parent().fadeOut(1000);
        });

jQuery操作DOM
    样式操作和类操作
        作用：设置或获取元素的样式属性值
    样式操作：
        1.设置样式
        // 设置单个样式 css(属性，值);
        $("div").css("background","red");
        // 设置多个样式 css(json);
        $("div").css({"width":100,"height":100,"background-color":"pink"})
        2.获取样式
        //获取样式：css(属性);
        //获取的时候如果有很多个，那么获取jquery对象中的第一个
        alert($("div").css("width"));
    类操作className
        1.添加类样式
        $(selector).addClass("liItem");//为指定元素添加类className
        注意：此处类名不带点，所有类操作的方法类名都不带点。
        2.移除类样式
        $(selector).removeClass("liItem");//为指定元素移除类
        $(selector).removeClass();//不指定参数，表示移除被选中元素的所有类
        3、判断有没有类样式：
        $(selector).hasClass("liItem");   //判断指定元素是否包含类 className
        此时，会返回true或false。jquery对象中，只要有一个带有指定类名的就是true，所有都不带才是false。
        4.切换类样式：
        $(selector).toggleClass(“liItem”);    //为指定元素切换类 className，该元素有类则移除，没有指定类则添加。
        解释：为指定元素切换类 className，该元素有类则移除，没有指定类则添加。
    jQuery的节点操作
        原生 js 有三种动态创建元素的方式。这里我们学一下 jQuery 动态创建元素。注意，创建的是 jQuery 对象。
            方式1.var $spanNode1 = $("<span>我是一个span元素</span>") // 返回的是 jQuery对象
            此方法类似于 原生 js 中的document.createElement("标签名");
            方式2。var node = $("#box").html("<li>我是li</li>")
            此方法类似于 原生 js 中的innerHTML。
        //方式一：      $("标签")             :类比于js中的document.createElement("li");
        console.log($("<li class='aaa'>我是li标签</li>"));
        //方式二：      $("ul").html("");     :类比innerHTML属性。因为此属性，识别标签。
        $("ul").html("<li>我是html方法穿件出来的li标签</li>")
        添加元素
            // 方式一：在$(selector)中追加$node
            $(selector).append($node);   //参数是 jQuery对象
            // 方式二：在$(selector)中追加div元素，
            $(selector).append('<div></div>');  //参数是 htmlString
            作用：在被选元素内部的最后一个子元素（或内容）后面插入内容（存在或者创建出来的元素都可以）
            通俗的解释：在盒子里的最末尾添加元素。
            如果是页面中存在的元素，那调用append()后，会把这个元素放到相应的目标元素里面去；但是，原来的这个元素，就不存在了。
            如果是给多个目标追加元素，那么方法的内部会复制多份这个元素，然后追加到多个目标里面去。
            2.$(selector).appendTo(node);
            作用：同append()，只不过是反着写的。
            3.$(selector).perpend(node);
            作用：在元素的第一个子元素前面追加内容或节点
            4.$(selector).after(nod);
            作用：在被选元素之后，作为兄弟元素插入内容或节点。
            5.$(selector).before(node);
            作用：在被选元素之前，作为兄弟元素插入内容或节点。
        清空元素：
            1.没有参数
            $(selector).empty();
            $(selector).html("");
            解释：清空指定元素的所有子元素（光杆司令）。
            2.$(selector).remove();
            解释：“自杀” 。把自己以及所有的内部元素从文档中删除掉。
        复制元素
            复制的新元素=$(selector).clone();
            解释：复制$(selector)这个元素。是深层复制。
        推荐使用 html("<span></span>") 方法来创建元素或者 html("") 清空元素。
    案例:选择水果 动态添加表格项
    jQuery设置和获取属性
        jQuery 无法直接操作节点的属性和src等，我们需要借助attr()方法。下面介绍。
        1.设置属性
            $(selector).attr("title","aaaaaa");
            参数解释：第一个参数表示：要设置的属性名称。第二个参数表示：该属性名称对应的值。
        2.获取属性
            $(selector).attr("title");
            参数为：要获取的属性的名称，返回指定属性对应的值。
        3.移除属性
            $(selector).removeAttr("title");
            参数为：要移除的属性的名称。
        4.form表单中prop()方法
        针对checked、selected、disabled属性，要使用 prop()方法，而不是其他的方法。
        prop方法通常用来影响DOM元素的动态状态，而不是改变的HTML属性。例如：input和button的disabled特性，以及checkbox的checked特性。
    val()方法和 text()方法
        $(selector).val();
        作用：设置或返回 form 表单元素的value值，例如：input、select、textarea 的值。
        $(selector).text();
        作用：设置或获取匹配元素的文本内容。不带参数表示，会把所有匹配到的元素内容拼接为一个字符串，不同于其他获取操作
        text() 不识别标签。
        html() 识别标签。

jQuery的事件机制和其他
    jQuery设置宽度和高度
        宽度操作：
        $(selector).width();//不带参数表示获取
        $(selector).width(200);//带参数表示设置宽度
        高度操作：
        $(selector).height();//不带参数表示获取
        $(selector).height(200)//带参数表示设置高度
    jQuery的css()获取高度，和jQuery的height获取高度，二者的区别？
        $("div").css();     //返回的是string类型，例如：30px
        $("div").height();  //返回得失number类型，例如：30。常用于数学计算。
jQuery的坐标操作
    offset()方法
        $(selector).offset();
        $(selector).offset({left:100,top:30});
        作用：获取或设置元素相对于 document 文档的位置。参数解释：
        无参数：表示获取。返回值为：{left:num, top:num}。返回值是相对于document的位置。
        有参数：表示设置。参数建议使用 number 数值类型。    
        注意：设置offset后，如果元素没有定位(默认值：static)，则被修改为relative
    position()方法
        $(selector).position();
        作用：获取相对于其最近的带有定位的父元素的位置。返回值为对象：{left:num, top:num}。
        注意：只能获取，不能设置。
    scrollTop()方法
        scrollTop();
        $(selector).scrollTop(100);
        作用：获取或者设置元素被卷去的头部的距离。参数解释：
        无参数：表示获取偏移。
        有参数：表示设置偏移，参数为数值类型。
    scrollLeft()方法
        scrollLeft();
	    $(selector).scrollLeft(100);
        作用：获取或者设置元素水平方向滚动的位置。参数解释：
        无参数：表示获取偏移。
        有参数：表示设置偏移，参数为数值类型。
    jQuery的事件机制
        click(handler)单击事件
        focus(handler) 获得焦点事件
        blur(handler)失去焦点事件
        mouseenter(handler)鼠标进入事件
        mouseleave(handler)鼠标离开事件
        dbclick(handler)双击事件
        change(handler)) 改变事件，如：文本框值改变，下拉列表值改变等。
        keydown(handler) 键盘按下事件
    on方式绑定事件
        最早采用的是 bind、delegate等方式绑定的。jQuery 1.7版本后，jQuery用on统一了所有的事件处理的方法，此方法兼容zepto(移动端类似于jQuery的一个库)。
            $(document).on("click mouseenter", ".box", {"name": 111}, function (event) {
            console.log(event.data);      //event.data获取的就是第三个参数这个json。
            console.log(event.data.name); //event.data.name获取的是name的值。
        });
        第一个参数：events，绑定事件的名称可以是由空格分隔的多个事件（标准事件或者自定义事件）。上方代码绑定的是单击事件和鼠标进入事件。
        第二个参数：selector, 执行事件的后代元素。
        第三个参数：data，传递给事件处理函数的数据，事件触发的时候通过event.data来使用（也就是说，可以通过event拿到data）
        第四个参数：handler，事件处理函数。
        $(document).on("click",".box", function () {
        alert(1);
        });
    off方式解绑事件
        $(selector).off();      // 解绑匹配元素的所有事件
        $(selector).off("click");   // 解绑匹配元素的所有click事件
        $(selector).off( "click", "**" );   // 解绑所有代理的click事件，元素本身的事件不会被解绑
    jQuery的事件对象
        event.data 传递给事件处理程序的额外数据
        event.currentTarget 等同于this，当前DOM对象
        event.pageX 鼠标相对于文档左部边缘的位置
        event.target 触发事件源，不一定===this
        event.stopPropagation()； 阻止事件冒泡
        event.preventDefault(); 阻止默认行为
        event.type 事件类型：click，dbclick…
        event.which 鼠标的按键类型：左1 中2 右3
        event.keyCode 键盘按键代码
    jQuery的两大特点
        1.链式编程：比如.show()和.html()可以连写成.show().html()。
        链式编程原理：return this。
        通常情况下，只有设置操作才能把链式编程延续下去。因为获取操作的时候，会返回获取到的相应的值，无法返回 this。
        end(); // 结束当前链最近的一次过滤操作，并且返回匹配元素之前的状态。
        2.隐式迭代
        隐式迭代的意思是：在方法的内部会为匹配到的所有元素进行循环遍历，执行相应的方法；而不用我们再进行循环，简化我们的操作，方便我们调用。
        如果获取的是多元素的值，大部分情况下返回的是第一个元素的值。
    each的用法
        大部分情况下是不需要使用each方法的，因为jQuery的隐式迭代特性。
        但是，如果要对每个元素做不同的处理，这时候就用到了each方法。
        $(selector).each(function(index,element){});
        参数一：表示当前元素在所有匹配元素中的索引号
        参数二：参数二表示当前元素（是js 中的DOM对象，而不是jQuery对象）

        //设置每个不一样的盒子透明度逐渐递增
        <script>
            jQuery(function(){
                $("ul li").each(function (index,element){
                    $(element).css("opacity","(index+1)/10");
                    console.log(index+"---"+element.tagName);
                }
            })
        </script>
    多库共存：
        多库共存指的是：jQuery占用了 $ 和 jQuery 这两个变量。当在同一个页面中引用了 jQuery 库以及其他的库（或者其他版本的jQuery库），恰好其他的库中也用到了 $ 或者jQuery变量.
          .那么，要保证每个库都能正常使用，就产生了多库共存的问题。
        我们可以通过以下方式获取 jQuery 库的版本号。
         console.log($.fn.jquery);  //打印 jQuery 库的版本号
         办法一：让 jQuery 放弃对 $ 的使用权：   $.noConflict();
         1.11.1版本放弃了对 $ 的使用权，交给了1.8.2版本；但是1.11.1版本并没有放弃对 jQuery关键字的使用权。
         办法二：同时放弃放弃两个符号的使用权，并定义一个新的使用权（如果有三个库时，可以这样用）
         $.noConflict(true);   //返回值是新的关键字
    jQuery的插件机制
        jQuery 库，虽然功能强大，但也不是面面俱到。jQuery 是通过插件的方式，来扩展它的功能：
        当你需要某个插件的时候，你可以“安装”到jQuery上面，然后使用。
        当你不再需要这个插件，那你就可以从jQuery上“卸载”它。
        

































